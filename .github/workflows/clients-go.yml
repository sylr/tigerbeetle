name: "clients/go"

on:
  workflow_call:
    secrets:
      TIGERBEETLE_GO_DEPLOY_KEY:
        required: true

jobs:
  binaries:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: ./scripts/install_zig.sh
      - run: ./zig/zig build go_client -Drelease-safe

      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: go-binaries-${{ github.sha }}
          path: src/clients/go/pkg/native

  publish:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: [binaries, docs, samples_integration_test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/clients/go
    steps:
      - uses: actions/checkout@v3
      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: go-binaries-${{ github.sha }}
          path: src/clients/go/pkg/native
      - run: ./scripts/publish.sh
        env:
          TIGERBEETLE_GO_DEPLOY_KEY: ${{ secrets.TIGERBEETLE_GO_DEPLOY_KEY }}
          GITHUB_SHA: ${{ github.sha }}

  samples_integration_test:
    needs: binaries

    # We use self hosted runners for M1 here. See macos.yml for an explaination
    permissions:
      contents: read

    strategy:
      matrix:
        # TODO: Add windows-latest in here.
        os: [ubuntu-latest, macos-latest, [self-hosted, ARM64, macos-12.6], [self-hosted, ARM64, macos-13.2]]
        sample: [basic, two-phase]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: go-binaries-${{ github.sha }}
          path: src/clients/go/pkg/native

      # Grab Zig
      - run: ./scripts/install.${{ matrix.os == 'windows-latest' && 'bat' || 'sh' }}

      # Specifically for self-hosted M1 runners, OK if this fails on other envs.
      - if: matrix.os != 'windows-latest'
        run: rm -rf /Users/macos/Library/Caches/go-build

      # Build and run the integration tests
      - run: ./scripts/build.${{ matrix.os == 'windows-latest' && 'bat' || 'sh' }} client_integration
      - run: ./zig-out/bin/client_integration${{ matrix.os == 'windows-latest' && '.exe' || '' }} --language go --sample ${{ matrix.sample }}

  docs:
    # We use self hosted runners for M1 here. See macos.yml for an explaination
    permissions:
      contents: read

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest, [self-hosted, ARM64, macos-12.6], [self-hosted, ARM64, macos-13.2]]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      # Grab Zig
      - run: ./scripts/install.${{ matrix.os == 'windows-latest' && 'bat' || 'sh' }}

      - if: matrix.os != 'windows-latest'
        run: |
          # Specifically for self-hosted M1 runners, OK if this fails on other envs.
          rm -rf /Users/macos/Library/Caches/go-build

          ./scripts/build.sh client_docs -- --language go

      # Set CC='zig.exe cc' for Windows.
      - if: matrix.os == 'windows-latest'
        run: |
          $env:CC = "$(pwd)\zig\zig.exe cc"
          .\scripts\build.bat client_docs
          .\zig-out\bin\client_docs --language go
      
      - if: matrix.os == 'ubuntu-latest'
        run: ./scripts/fail_on_diff.sh

